package me.alpha432.oyvey.features.modules.exploit;

import com.mojang.realmsclient.gui.ChatFormatting;
import me.alpha432.oyvey.features.command.Command;
import me.alpha432.oyvey.features.modules.Module;
import me.alpha432.oyvey.features.modules.movement.AutoWalk;
import me.alpha432.oyvey.features.setting.Setting;
import me.alpha432.oyvey.util.Timer;
import net.minecraft.client.gui.GuiDisconnected;
import net.minecraft.client.multiplayer.GuiConnecting;
import net.minecraft.client.multiplayer.ServerData;
import net.minecraft.client.multiplayer.WorldClient;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityMinecart;
import net.minecraft.entity.passive.AbstractHorse;
import net.minecraft.entity.passive.EntityDonkey;
import net.minecraft.entity.passive.EntityLlama;
import net.minecraft.entity.passive.EntityMule;
import net.minecraft.network.play.client.CPacketChatMessage;
import net.minecraft.util.EnumHand;
import net.minecraft.util.text.TextComponentString;

import java.util.Comparator;
import java.util.Objects;

// todo:vyhazovani shulkeru, check pres /msg a reconnect


public class AutoDupe extends Module {
    public Setting<Ppl> person = register(new Setting("Person", Ppl.Duper));
    public Setting<Dirs> dir = register(new Setting("Direction", Dirs.East, n -> this.person.getValue() == Ppl.Duper));
    private final Setting<Boolean> start = this.register(new Setting<Boolean>("enableThenToggle", Boolean.FALSE));
    private final Setting<Boolean> trenend = this.register(new Setting<Boolean>("Trenend", Boolean.FALSE));
    private final Setting<Boolean> login = this.register(new Setting<Boolean>("Login", Boolean.FALSE, n -> this.person.getValue() == Ppl.pushin_p));
    public Setting<String> pass= register(new Setting("pass", "/login pass", n -> this.person.getValue() == Ppl.pushin_p && this.login.getValue()));
    private final Setting<Integer> secs = this.register(new Setting<Integer>("/lobbyDelay", 10, 5, 60, n -> this.person.getValue() == Ppl.pushin_p && this.trenend.getValue()));
    private final Setting<Integer> seconds = this.register(new Setting<Integer>("connectDelay", 10, 5, 60, n -> this.person.getValue() == Ppl.pushin_p));
    Setting<Integer> radius = this.register(new Setting<Integer>("messageArea", 10, 0, 30));
    private final Setting<Boolean> endpos = this.register(new Setting<Boolean>("getEndPos", Boolean.FALSE, n -> this.person.getValue() == Ppl.Duper));
    private final Setting<Boolean> coords = this.register(new Setting<Boolean>("coords", Boolean.FALSE, n -> this.person.getValue() == Ppl.Duper));
    private final Setting<Boolean> debug = this.register(new Setting<Boolean>("debug", Boolean.TRUE, n -> this.person.getValue() == Ppl.Duper));
    private static ServerData cServer;
    int endX, endY, endZ;


    public AutoDupe() {
        super("AutoDupe", "lolol", Module.Category.EXPLOIT, true, false, false);
        timer.reset();
        ReconnectTimer = seconds.getValue() * 500l;
    }

    private Timer timer = new Timer();
    private long ReconnectTimer;

    public Integer Ticks = 0;

    public void reconnect() {

        cServer = mc.currentServerData;
       // Minecraft.getMinecraft().getConnection().handleDisconnect(new SPacketDisconnect(new TextComponentString("\u00a7c[AutoDupe] \u00a7rreconnecting")));
        this.mc.world.sendQuittingDisconnectingPacket();
        this.mc.loadWorld((WorldClient)null);
        mc.displayGuiScreen(new MrdkaConnecting(new GuiDisconnected(mc.currentScreen, "Tethys", new TextComponentString("\u00A75[\u00A7d\u00A7lTethys\u00A7r\u00A75]\u00A7r \u00a7c[AutoDupe] \u00a7rreconnecting")), (int) ReconnectTimer, cServer));
    }

    @Override
    public String getDisplayInfo() {
        return "PacketCancel";
    }


    public void mount() {

        Entity l_Entity = mc.world.loadedEntityList.stream()
                .filter(p_Entity -> isValidEntity(p_Entity))
                .min(Comparator.comparing(p_Entity -> mc.player.getDistance(p_Entity)))
                .orElse(null);
        //
        if (l_Entity == null) {
            return;
        }


        if (this.debug.getValue()) {
            Command.sendMessage(ChatFormatting.RED + "[AutoDupe] " + ChatFormatting.RESET + "mounting entity [" + l_Entity.getEntityId() + "]");
        }
        if (l_Entity != null)
            mc.playerController.interactWithEntity(mc.player, l_Entity, EnumHand.MAIN_HAND);
    }

    public void mount2() {

        Entity l_Entity = mc.world.loadedEntityList.stream()
                .filter(p_Entity -> minecart(p_Entity))
                .min(Comparator.comparing(p_Entity -> mc.player.getDistance(p_Entity)))
                .orElse(null);
        //
        if (l_Entity == null) {
            return;
        }
        if (this.debug.getValue()) {
            Command.sendMessage(ChatFormatting.RED + "[AutoDupe] " + ChatFormatting.RESET + "mounting entity [" + l_Entity.getEntityId() + "]");
        }
        if (l_Entity != null)
            mc.playerController.interactWithEntity(mc.player, l_Entity, EnumHand.MAIN_HAND);


    }


    private boolean isValidEntity(Entity entity) {
        if (entity.getDistance(mc.player) > 4)
            return false;

        if (entity instanceof AbstractHorse) {
            AbstractHorse horse = (AbstractHorse) entity;

            if (horse.isChild())
                return false;
        }

        if (entity instanceof EntityDonkey)
            return true;

        if (entity instanceof EntityMule)
            return true;

        if (entity instanceof EntityLlama) {
            EntityLlama l_Llama = (EntityLlama) entity;

            if (!l_Llama.isChild())
                return true;
        }

        return false;
    }

    private boolean minecart(Entity entity) {
        if (entity.getDistance(mc.player) > 4)
            return false;

        if (entity instanceof EntityMinecart)
            return true;

        return false;
    }

    public void direc() {
        this.setPitch(0);
        if (this.dir.getValue() == Dirs.East) {
            this.setYaw(270);
        }
        if (this.dir.getValue() == Dirs.South) {
            this.setYaw(0);
        }
        if (this.dir.getValue() == Dirs.West) {
            this.setYaw(90);
        }
        if (this.dir.getValue() == Dirs.North) {
            this.setYaw(180);
        }
    }


    //enabled
    @Override
    public void onEnable() {   //directions
        Ticks = 0;
        // messages
        // goofy
        if (this.person.getValue() == Ppl.Duper) {
            if (this.start.getValue()) {
                mount2();
                if (this.debug.getValue()) {
                    Command.sendMessage(ChatFormatting.RED + "[AutoDupe] " + ChatFormatting.RESET + "starting");
                    Command.sendMessage(ChatFormatting.RED + "[AutoDupe] " + ChatFormatting.RESET + "packetcancel = enabled");
                    Command.sendMessage(ChatFormatting.RED + "[AutoDupe] " + ChatFormatting.RESET + "autowalk = enabled");
                }
                if (this.trenend.getValue()) {
                    if (this.debug.getValue()) {
                        Command.sendMessage(ChatFormatting.RED + "[AutoDupe] " + ChatFormatting.BLUE + "[Trenend] " + ChatFormatting.RESET + "mountbypass = enabled");
                    }
                    MountBypass.INSTANCE.setEnabled(true);
                }
                PacketCancel.INSTANCE.setEnabled(true);
                AutoWalk.INSTANCE.setEnabled(true);
            }
        }
    }


    @Override
    public void onUpdate() {
        if (this.person.getValue() == Ppl.Duper) {
            if (this.start.getValue()) {
                int tX = (int) Math.floor(mc.player.posX);
                int tY = (int) Math.floor(mc.player.posY);
                int tZ = (int) Math.floor(mc.player.posZ);

                if (tX == endX && tY == endY && tZ == endZ) {
                    mount();
                }
            }
        }
        if (this.person.getValue() == Ppl.pushin_p) {
            if (this.start.getValue()) {
                if (this.trenend.getValue()) {
                    Ticks = Ticks + 1;
                    if (Ticks == 200) {
                        AutoDupe.mc.player.connection.sendPacket(new CPacketChatMessage("/anarchy"));
                        this.start.setValue(false);
                    }
                    this.setEnabled(false);
                }
            }
        }

        if (this.person.getValue() == Ppl.Duper) {
            if (this.start.getValue()) {
                Ticks = Ticks + 1;
                if (Ticks == 10) {
                    direc();
                    AutoWalk.INSTANCE.setEnabled(false);
                    if (this.debug.getValue()) {
                        Command.sendMessage(ChatFormatting.RED + "[AutoDupe] " + ChatFormatting.RESET + "autowalk = disabled");
                    }
                }
                this.start.setValue(false);
            }
        }

        if (this.endpos.getValue()) {
            endX = (int) Math.floor(mc.player.posX);
            endY = (int) Math.floor(mc.player.posY);
            endZ = (int) Math.floor(mc.player.posZ);
            Command.sendMessage(ChatFormatting.RED + "[AutoDupe] " + ChatFormatting.RESET + "end pos set");
            if (this.coords.getValue()) {
                Command.sendMessage(ChatFormatting.RED + "[AutoDupe] " + ChatFormatting.RESET + "end pos -> " + endX + " " + endY + " " + endZ);
            }
            endpos.setValue(false);
        }
    }

    // disabled
    @Override
    public void onDisable() {
        if (this.person.getValue() == Ppl.Duper) {
            if (this.debug.getValue()) {
                Command.sendMessage(ChatFormatting.RED + "[AutoDupe] " + ChatFormatting.RESET + "stopping");
                Command.sendMessage(ChatFormatting.RED + "[AutoDupe] " + ChatFormatting.RESET + "packetcancel = disabled");
                PacketCancel.INSTANCE.setEnabled(false);
                AutoWalk.INSTANCE.setEnabled(false);
            }
            if (this.trenend.getValue()) {
                if (this.debug.getValue()) {
                    Command.sendMessage(ChatFormatting.RED + "[AutoDupe] " + ChatFormatting.BLUE + "[Trenend] " + ChatFormatting.RESET + "mountbypass = disabled");
                }
                MountBypass.INSTANCE.setEnabled(false);
            }
            start.setValue(false);
        }

    }

    // yaw
    private void setYaw(int yaw) {
        if (AutoDupe.mc.player.isRiding()) {
            Objects.requireNonNull(AutoDupe.mc.player.getRidingEntity()).rotationYaw = yaw;
        }
        AutoDupe.mc.player.rotationYaw = yaw;
    }

    // pitch
    private void setPitch(int pitch) {
        if (AutoDupe.mc.player.isRiding()) {
            Objects.requireNonNull(AutoDupe.mc.player.getRidingEntity()).rotationPitch = pitch;
        }
        AutoDupe.mc.player.rotationPitch = pitch;
    }

    enum Dirs {
        East,
        South,
        West,
        North
    }

    enum Ppl {
        Duper,
        pushin_p
    }
}

class MrdkaConnecting extends GuiDisconnected {

    long reconnectTime, hajzl;

    ServerData kokotina;

    boolean hajzlovina = false;

    public MrdkaConnecting(GuiDisconnected disconnected, int rec, ServerData kokot ) {
        super(disconnected.parentScreen, disconnected.reason, disconnected.message);
        this.reconnectTime = rec;
        this.kokotina = kokot;
        this.hajzl = System.currentTimeMillis();
    }

    @Override
    public void updateScreen() {
        if (hajzlovina)
            mc.displayGuiScreen(new GuiConnecting(parentScreen, mc, kokotina == null ? mc.currentServerData : kokotina));
    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        super.drawScreen(mouseX, mouseY, partialTicks);
        if(System.currentTimeMillis() - hajzl >= reconnectTime){
            System.out.println("Hajzlovina enabled!");
            hajzlovina = true;
        }
    }
}